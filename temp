export DOMAIN=127.0.0.1.nip.io
openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout minikube_ingress_tls_self.key -out minikube_ingress_tls_self.crt -subj "/CN=*.127.0.0.1.nip.io" -days 365

kubectl create secret tls 127-0-0-1-nip-io-tls --cert=minikube_ingress_tls_self.crt --key=minikube_ingress_tls_self.key


curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"


You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join kube-lb:6443 --token dr5ky9.scehcq6wl2h0v3uv \
	--discovery-token-ca-cert-hash sha256:006948473f34d216a401cb47a9a8bb302a458fcde42e37cd3ea135ec820fe133 \
	--control-plane --certificate-key 679d24afc34013dbca3867d7bb22f005942a196afb5162145532c7d5d938914f

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join kube-lb:6443 --token dr5ky9.scehcq6wl2h0v3uv \
--discovery-token-ca-cert-hash sha256:006948473f34d216a401cb47a9a8bb302a458fcde42e37cd3ea135ec820fe133 

sudo cat >> /etc/hosts << EOF
192.168.64.30 kube-lb
192.168.64.28 kube-master-1
192.168.64.29 kube-master-2
192.168.64.31 kube-worker-1
192.168.64.32 kube-worker-2
EOF