export DOMAIN=127.0.0.1.nip.io
openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout minikube_ingress_tls_self.key -out minikube_ingress_tls_self.crt -subj "/CN=*.127.0.0.1.nip.io" -days 365

kubectl create secret tls 127-0-0-1-nip-io-tls --cert=minikube_ingress_tls_self.crt --key=minikube_ingress_tls_self.key


curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"


You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join kube-lb:6443 --token d54mqm.b85nmdy0rzzf0sil \
	--discovery-token-ca-cert-hash sha256:039a9f600c786e313731d32c7f32f9e91172b74885df0028d17d1dd17e5ed1e8 \
	--control-plane --certificate-key 791b9bed28590e136437d7c9ef41959758caf5c2419af9fa1f39498e6bdbd08b

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join kube-lb:6443 --token d54mqm.b85nmdy0rzzf0sil \
	--discovery-token-ca-cert-hash sha256:039a9f600c786e313731d32c7f32f9e91172b74885df0028d17d1dd17e5ed1e8 

